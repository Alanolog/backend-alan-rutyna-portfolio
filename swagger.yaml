openapi: 3.0.0
info:
  title: portfolio-API
  contact: {}
  version: "1.0"
servers:
  - url: https://alan-rutyna-api.onrender.com/api/v1
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: register
      operationId: register
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/registerrequest"
                - example:
                    username: john
                    email: alan12345@gmail.com
                    password: secret
            example:
              username: john
              email: alan12345@gmail.com
              password: secret
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: login
      operationId: login
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/loginrequest"
                - example:
                    email: alan12345@gmail.com
                    password: secret
            example:
              email: alan12345@gmail.com
              password: secret
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
  /tasks:
    get:
      tags:
        - Tasks
      summary: getAllTasks
      operationId: getAllTasks
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Tasks
      summary: createTask
      operationId: createTask
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/createTaskRequest"
                - example:
                    name: umyj naczynia
                    description: msuisz umyć naczynia
            example:
              name: umyj naczynia
              description: msuisz umyć naczynia
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /tasks/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The task ID
    get:
      tags:
        - Tasks
      summary: getSingleTask
      operationId: getSingleTask
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Tasks
      summary: updateTask
      operationId: updateTask
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/updateTaskRequest"
                - example:
                    name: umyj naczynia
                    description: msuisz umyć naczynia
            example:
              name: umyj naczynia
              description: msuisz umyć naczynia
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Tasks
      summary: deleteTask
      operationId: deleteTask
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    registerrequest:
      title: registerrequest
      required:
        - username
        - email
        - password
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        username: john
        email: alan12345@gmail.com
        password: secret
    loginrequest:
      title: loginrequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: alan12345@gmail.com
        password: secret
    createTaskRequest:
      title: createTaskRequest
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: umyj naczynia
        description: msuisz umyć naczynia
    updateTaskRequest:
      title: updateTaskRequest
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: umyj naczynia
        description: msuisz umyć naczynia
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Misc
    description: ""
  - name: Auth
    description: ""
  - name: Tasks
    description: ""
